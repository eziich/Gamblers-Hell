@page "/accountverification"
@using GamblersHell.Shared
@using GamblersHell.Client.Pages.Components
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using GamblersHell.Client.StateProviders
@using GamblersHell.Client.Services
@using Microsoft.JSInterop
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserService UserService
@inject NavigationManager NavigationManager
@inject CookieAuthenticationStateProvider AuthManager
@inject NavMenuState NavMenuState
@attribute [Authorize]

<PageTitle>Account Verification @GamblersHellConstants.DeafultPageName</PageTitle>

<style>
    body {
        background-image: linear-gradient(180deg, #000000 0%, #1a0000 50%, #3d0000 75%, #1a0000 90%, #000000 100%);
        background-attachment: fixed;
    }

    .verification-container {
        background-image: radial-gradient(circle, #3d0000, #2a0000, #1a0000, #000000);
        border: 2px solid #ff6666;
        box-shadow: 0 0 25px rgba(255, 0, 0, 0.6);
        border-radius: 15px;
        min-height: 400px;
        position: relative;
        overflow: hidden;
    }

        .verification-container::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, transparent 30%, rgba(255, 0, 0, 0.1) 50%, transparent 70%);
            animation: shimmer 3s infinite;
            pointer-events: none;
        }

    .pact-title {
        font-family: 'Cinzel', serif;
        color: #ff9999;
        text-shadow: 0 0 15px rgba(255, 0, 0, 0.9);
        letter-spacing: 3px;
        font-size: 2.5rem;
        text-transform: uppercase;
        animation: glow 3s infinite alternate;
    }

    .pact-subtitle {
        font-family: 'Cinzel', serif;
        color: #ff6666;
        text-shadow: 0 0 10px rgba(255, 0, 0, 0.7);
        letter-spacing: 2px;
        font-size: 1.2rem;
        font-style: italic;
    }

    .soul-warning {
        background: linear-gradient(135deg, #1a0000, #3d0000, #5a0000);
        border: 1px solid #ff6666;
        border-radius: 10px;
        box-shadow: inset 0 0 15px rgba(255, 0, 0, 0.3);
        animation: pulse-border 2s infinite;
    }

    .warning-text {
        color: #ffcccc;
        text-shadow: 0 0 8px rgba(255, 0, 0, 0.6);
        font-size: 1.1rem;
        line-height: 1.6;
    }

    .hellfire-button {
        background: linear-gradient(135deg, #660000, #cc0000, #ff3333);
        border: 2px solid #ff6666;
        color: white;
        text-shadow: 0 0 10px rgba(0, 0, 0, 0.8);
        font-weight: bold;
        letter-spacing: 1px;
        text-transform: uppercase;
        transition: all 0.3s ease;
        box-shadow: 0 0 15px rgba(255, 0, 0, 0.5);
        min-width: 200px;
        height: 50px;
        font-size: 1.1rem;
    }

        .hellfire-button:hover {
            background: linear-gradient(135deg, #990000, #ff0000, #ff6666);
            box-shadow: 0 0 25px rgba(255, 0, 0, 0.8);
            transform: translateY(-2px) scale(1.05);
            border-color: #ff9999;
        }

    .demon-eye {
        font-size: 120px;
        color: #ff3333;
        animation: eye-glow 4s infinite alternate;
        filter: drop-shadow(0 0 20px rgba(255, 0, 0, 0.8));
    }

    .floating-skull {
        animation: float 6s ease-in-out infinite;
        color: #ff6666;
        font-size: 80px;
        opacity: 0.7;
    }

    .contract-scroll {
        background: linear-gradient(180deg, #0f0000, #1a0000, #2a0000);
        border: 1px solid #5a0000;
        border-radius: 8px;
        box-shadow: inset 0 0 10px rgba(255, 0, 0, 0.2);
    }

    .latin-inscription {
        font-family: 'Cinzel', serif;
        color: #cc6666;
        font-style: italic;
        text-align: center;
        letter-spacing: 1px;
        animation: fade-glow 4s infinite alternate;
    }

    @@keyframes glow {
        0% {
            filter: drop-shadow(0 0 5px rgba(255, 0, 0, 0.7));
        }

        100% {
            filter: drop-shadow(0 0 20px rgba(255, 0, 0, 1));
        }
    }

    @@keyframes pulse-border {
        0% {
            border-color: #ff6666;
            box-shadow: inset 0 0 15px rgba(255, 0, 0, 0.3);
        }

        50% {
            border-color: #ff3333;
            box-shadow: inset 0 0 25px rgba(255, 0, 0, 0.5);
        }

        100% {
            border-color: #ff6666;
            box-shadow: inset 0 0 15px rgba(255, 0, 0, 0.3);
        }
    }

    @@keyframes eye-glow {
        0% {
            color: #ff3333;
            filter: drop-shadow(0 0 10px rgba(255, 0, 0, 0.6));
        }

        100% {
            color: #ff6666;
            filter: drop-shadow(0 0 30px rgba(255, 0, 0, 1));
        }
    }

    @@keyframes float {
        0% {
            transform: translateY(0px) rotate(0deg);
        }

        50% {
            transform: translateY(-15px) rotate(5deg);
        }

        100% {
            transform: translateY(0px) rotate(0deg);
        }
    }

    @@keyframes shimmer {
        0% {
            transform: translateX(-100%);
        }

        100% {
            transform: translateX(100%);
        }
    }

    @@keyframes fade-glow {
        0% {
            opacity: 0.6;
            text-shadow: 0 0 5px rgba(255, 0, 0, 0.4);
        }

        100% {
            opacity: 1;
            text-shadow: 0 0 15px rgba(255, 0, 0, 0.8);
        }
    }
</style>

@if (_pageLoading)
{
    <LoadingPageComponent />
}
else
{
    @if (_accountVerified == 0)
    {

        <MudContainer MaxWidth="MaxWidth.Large" Class="my-6">
            <MudPaper Elevation="5" Class="verification-container pa-6">

                @* Header Section *@
                <MudContainer class="d-flex flex-column align-center mb-6">
                    <MudIcon Icon="@Icons.Material.Filled.ReceiptLong" Class="demon-eye mb-4" />
                    <MudText Class="pact-title mb-2">The Infernal Pact</MudText>
                    <MudText Class="pact-subtitle">Verification Required for Entry</MudText>
                </MudContainer>

                @* Main Warning Section *@
                <MudPaper Class="soul-warning pa-4 mb-6" Elevation="0">
                    <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Error" Size="Size.Large" Class="mr-3" />
                    <MudText Typo="Typo.h5" Style="color: #ff9999; font-weight: bold; text-transform: uppercase; letter-spacing: 1px;">
                        Soul Verification Incomplete
                    </MudText>

                    <MudText Class="warning-text mb-4">
                        The ancient contract remains unsigned, mortal. Your soul hovers at the threshold between the world of the living and the eternal games of chance that await below. Without verification, you are but a shadow, denied entry to the infernal casino where destiny is decided by the roll of dice and the turn of cards.
                    </MudText>

                    <MudText Class="warning-text">
                        <strong>Complete the ritual of verification</strong> to seal your pact with the underworld and gain access to the nine circles of gaming hell. The demons await your commitment.
                    </MudText>
                </MudPaper>

                @* Contract Details *@
                <MudPaper Class="contract-scroll pa-4 mb-6" Elevation="1">
                    <MudText Typo="Typo.h6" Class="mb-3" Style="color: #ff9999; text-align: center; text-transform: uppercase; letter-spacing: 2px;">
                        Steps for Account Verification
                    </MudText>

                    <MudList T="string" Class="pa-0">
                        <MudListItem T="string" Class="px-0">
                            <MudContainer Class="d-flex align-items-center">
                                <MudIcon Icon="@Icons.Material.Filled.Brightness1" Color="Color.Error" Size="Size.Small" Class="mr-3" />
                                <MudText Style="color: #ffcccc;">Request the token by clicking the "Request Token" button. The verification token will be sent to email linked to this account.</MudText>
                            </MudContainer>
                        </MudListItem>
                        <MudListItem T="string" Class="px-0">
                            <MudContainer class="d-flex align-items-center">
                                <MudIcon Icon="@Icons.Material.Filled.Brightness1" Color="Color.Error" Size="Size.Small" Class="mr-3" />
                                <MudText Style="color: #ffcccc;">Upon recieveng the token, copy it and paste it into the token field.</MudText>
                            </MudContainer>
                        </MudListItem>
                        <MudListItem T="string" Class="px-0">
                            <MudContainer class="d-flex align-items-center">
                                <MudIcon Icon="@Icons.Material.Filled.Brightness1" Color="Color.Error" Size="Size.Small" Class="mr-3" />
                                <MudText Style="color: #ffcccc;">Finish the verification by clicking the "Seal The Pact" button.</MudText>
                            </MudContainer>
                        </MudListItem>
                    </MudList>
                </MudPaper>

                @* Action Section *@
                <div class="d-flex flex-column align-center">
                    <MudButton Class="hellfire-button my-2" Disabled="_processingToken" @onclick="() => RequestVerificationToken()">
                        @if (_processingToken)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Generating token...</MudText>
                        }
                        else
                        {
                            <MudContainer Class="d-flex flex-row align-content-center align-items-center justify-content-center">
                                <MudText>Request token</MudText>
                                <MudIcon Class="mx-1" Icon="@Icons.Material.Filled.Token"></MudIcon>
                            </MudContainer>
                        }
                    </MudButton>

                    <div class="d-flex align-items-center mb-4">
                        <MudHidden Breakpoint="Breakpoint.SmAndDown">
                            <MudText Class="floating-skull mr-3">💀</MudText>
                        </MudHidden>
                        <MudTextField Class="latin-inscription"
                                      T="string"
                                      Style="color:white"
                                      Placeholder="Enter your token here"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      @bind-Value="_verificationToken"
                                      RequiredError="Token is required!"
                                      Immediate="true"
                                      OnlyValidateIfDirty="true"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Token"
                                      AdornmentColor="Color.Error">
                        </MudTextField>
                        <MudHidden Breakpoint="Breakpoint.SmAndDown">
                            <MudText Class="floating-skull mr-3">💀</MudText>
                        </MudHidden>
                    </div>

                    <MudButton Class="hellfire-button" Disabled="_processingVerify" @onclick="() => VerifyUser()">
                        @if (_processingVerify)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Sealing the pact...</MudText>
                        }
                        else
                        {
                            <MudContainer Class="d-flex flex-row align-content-center align-items-center justify-content-center">
                                <MudText>Verify account</MudText>
                                <MudIcon Class="mx-1" Icon="@Icons.Material.Filled.Verified"></MudIcon>
                            </MudContainer>
                        }
                    </MudButton>
                </div>

            </MudPaper>
        </MudContainer>
    }
    else
    {
        <UserAlreadyVerifiedComponent />
    }
}


@code {
    private int _id { get; set; }
    private int _accountVerified { get; set; } = 0;
    private string _email { get; set; } = string.Empty;
    private string _verificationToken { get; set; } = string.Empty;
    private bool _pageLoading = true;
    private bool _processingToken = false;
    private bool _processingVerify = false;

    private UserDTO UserModel { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _id = Convert.ToInt32(user.FindFirst(u => u.Type == "ID").Value);
            _email = user.FindFirst(u => u.Type == "Email")?.Value ?? string.Empty;
            _accountVerified = Convert.ToInt32(user.FindFirst(u => u.Type == "UserVerified")?.Value ?? "0");

            try
            {
                UserModel = await UserService.GetUserByID(_id);
                _pageLoading = false;
            }
            catch
            {
                throw;
            }
        }
        else
        {
            _id = 0;
        }
        Console.WriteLine(_email);
    }


    public async Task RequestVerificationToken()
    {
        _processingToken = true;
        StateHasChanged();

        try
        {
            var response = await UserService.RequestVerificationToken(_email);
            if (response)
            {
                Snackbar.Add("Verification token has been sent to email address linked to this account", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to send verification token", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Snackbar.Add("An error occurred while requesting verification token", Severity.Error);
        }
        _processingToken = false;
        StateHasChanged();
    }

    public async Task VerifyUser()
    {
        _processingVerify = true;
        StateHasChanged();

        try
        {
            var response = await UserService.VerifyUser(_verificationToken);

            if (response)
            {
                Snackbar.Add("User successfully verified ", Severity.Success);
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;

                await AuthManager.LogOut(user);

                _processingVerify = false;
                StateHasChanged();

                NavigationManager.NavigateTo("/login");
                return;
            }
            _processingVerify = false;
            StateHasChanged();
            Snackbar.Add("Error upon verification!", Severity.Error);
            return;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
}
