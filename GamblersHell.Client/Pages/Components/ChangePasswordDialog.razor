@using GamblersHell.Shared
@using GamblersHell.Client.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using GamblersHell.Client.StateProviders
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject UserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CookieAuthenticationStateProvider AuthManager
@inject NavigationManager NavManager
@attribute [Authorize]

<style>
    body {
        background-image: linear-gradient(180deg, #000000 0%, #1a0000 50%, #3d0000 75%, #1a0000 90%, #000000 100%);
        background-attachment: fixed;
    }

    .password-dialog {
        border-radius: 8px;
        border: 1px solid rgba(139, 0, 0, 0.5);
        box-shadow: 0 4px 30px rgba(80, 0, 0, 0.3);
    }

    .dialog-header {
        border-bottom: 1px solid rgba(139, 0, 0, 0.5);
        padding-bottom: 8px;
    }

    .password-field {
        margin: 16px 0;
        color: white;
    }

        .password-field :deep(.mud-input) {
            background-color: rgba(0, 0, 0, 0.4);
            border-radius: 4px;
        }

        .password-field :deep(.mud-input-outlined) {
            border-color: rgba(139, 0, 0, 0.6);
        }

        .password-field :deep(.mud-input-outlined:hover) {
            border-color: #bb0000;
        }

        .password-field :deep(.mud-input-label) {
            color: #d9d9d9;
        }

    .action-button {
        transition: all 0.3s ease;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        border-radius: 4px;
        color: white;
    }

        .action-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(139, 0, 0, 0.5);
        }

    .cancel-btn {
        background-color: rgba(80, 0, 0, 0.8);
    }

    .confirm-btn {
        background-color: #8b0000;
    }
</style>

<MudDialog Class="password-dialog" Style="background: radial-gradient(circle at center, #3d0000 0%, #2a0000 40%, #1a0000 75%, #000000 100%); background-attachment: fixed; background-size: cover;">
    <TitleContent>
        <div class="dialog-header pa-3">
            <MudText Style="color:#f5f5f5; font-weight:500;" Typo="Typo.h6">Change Password</MudText>
        </div>
    </TitleContent>
    <DialogContent>
        <MudContainer Class="pa-4">
            <MudTextField Class="password-field my-4" Required="true" RequiredError="This field is required!"
                          Variant="Variant.Outlined" InputType="InputType.Password"
                          Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Lock"
                          ShrinkLabel Label="Current password" @bind-Value="currentPassword" />

            <MudTextField Class="password-field my-4" Required="true" RequiredError="This field is required!"
                          Variant="Variant.Outlined" InputType="showPasswordAction()" For="@(() => UserModel.Password)" OnAdornmentClick="() => showPasswordButton()"
                          Adornment="Adornment.End" AdornmentIcon="@(_showPassword ? @Icons.Material.Filled.VisibilityOff : @Icons.Material.Filled.Visibility)"
                          ShrinkLabel Label="New password" @bind-Value="_newPassword" />

            <MudTextField Class="password-field my-4" Required="true" RequiredError="This field is required!"
                          Variant="Variant.Outlined" InputType="showPasswordAction()" For="@(() => UserModel.Password)" OnAdornmentClick="() => showPasswordButton()"
                          Adornment="Adornment.End" AdornmentIcon="@(_showPassword ? @Icons.Material.Filled.VisibilityOff : @Icons.Material.Filled.Visibility)"
                          ShrinkLabel Label="Confirm new password" @bind-Value="_newPasswordConfirm" />
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudContainer Class="d-flex flex-row align-items-center justify-content-between px-4 pb-4">
            <MudButton Class="action-button cancel-btn px-4 py-2 mx-2"
                       OnClick="Cancel" StartIcon="@Icons.Material.Filled.Cancel">
                Cancel
            </MudButton>
            <MudButton Class="action-button confirm-btn px-4 py-2 mx-2"
                       OnClick="ChangePassword" EndIcon="@Icons.Material.Filled.LockReset">
                Update Password
            </MudButton>
        </MudContainer>
    </DialogActions>
</MudDialog>

@code {
    private int _id { get; set; }
    private string currentPassword { get; set; } = string.Empty;
    private string _newPassword { get; set; } = string.Empty;
    private string _newPasswordConfirm { get; set; } = string.Empty;
    private bool _showPassword = false;

    private UserDTO UserModel { get; set; } = new();

    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }

    [CascadingParameter] public Task<AuthenticationState>? _AuthStateTask { get; set; }
    public LoginDTO _Model { get; set; } = new LoginDTO();

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {

            _id = Convert.ToInt32(user.FindFirst(u => u.Type == nameof(UserDTO.ID)).Value);

            try
            {
                UserModel = await UserService.GetUserByID(_id);
            }
            catch
            {
                throw;
            }
        }
        else
        {
            _id = 0;
        }
    }

    private void showPasswordButton()
    {
        _showPassword = !_showPassword;
    }

    private InputType showPasswordAction()
    {
        if (!_showPassword)
        {
            return InputType.Password;
        }
        else
        {
            return InputType.Text;
        }
    }

    private async void ChangePassword()
    {
        if (_newPassword != _newPasswordConfirm)
        {
            Snackbar.Add("Password and confirm password do not match!", Severity.Error);
            return;
        }

        if (string.IsNullOrEmpty(currentPassword) || string.IsNullOrEmpty(_newPassword) || string.IsNullOrEmpty(_newPasswordConfirm))
        {
            Snackbar.Add("Error! Password was not changed! All fields are required!", Severity.Error);
            return;
        }

        try
        {
            var response = await UserService.UserChangePassword(_id, currentPassword, _newPassword);
            if (response)
            {
                Snackbar.Add("Password changed successfully, refreshing", Severity.Success);
                await Task.Delay(1000);
                await Logout();
            }
            else
            {
                Snackbar.Add("Error! Password was not changed!", Severity.Error);
                return;
            }
        }
        catch
        {
            Snackbar.Add("Error! Password was not changed!", Severity.Error);
            return;
        }

    }

    public async Task Logout()
    {
        try
        {
            // Get the current authentication state
            var authState = await _AuthStateTask;

            // Pass the current user's
            // sPrincipal to the LogOut method
            var result = await AuthManager.LogOut(authState.User);

            // Navigate to login page after successful logout
            NavManager.NavigateTo("/login", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout error: {ex.Message}");
            // You might want to display an error message to the user
        }
    }
}