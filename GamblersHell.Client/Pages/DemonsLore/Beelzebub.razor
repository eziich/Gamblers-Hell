@page "/beelzebub"
@using GamblersHell.Client.StateProviders
@using GamblersHell.Shared
@using GamblersHell.Client.Services
@using GamblersHell.Client.Pages.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@inject UserService UserService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<PageTitle>Belial @GamblersHellConstants.DeafultPageName</PageTitle>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="css/ScrollsHighRank.css">
</head>

<style>
    body {
        background-image: linear-gradient(180deg, #000000, #000000, #000000, #0a0a0a, #1a001a, #3d003d);
        background-attachment: fixed;
    }

    .satan-container {
        animation: glow 3s infinite alternate;
    }

    .title-text {
        font-family: 'Cinzel', serif;
        text-shadow: 0 0 10px rgba(221, 160, 221, 0.8);
        letter-spacing: 2px;
    }

    .scroll {
        background-image: radial-gradient(circle, #3d003d, #1a001a, #0a0a0a, #000000);
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 0 15px rgba(221, 160, 221, 0.5);
        padding: 2rem;
        border: 2px solid #cc99cc;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .scroll:hover {
            box-shadow: 0 0 20px rgba(221, 160, 221, 0.8);
        }

    .scroll-text {
        color: #cc99cc;
    }

    .satan-image {
        filter: contrast(1.2) saturate(1.2);
        transition: all 0.3s ease;
        border-radius: 4px;
        animation: float 6s ease-in-out infinite;
    }

    @@keyframes glow {
        0% {
            filter: drop-shadow(0 0 2px rgba(221, 160, 221, 0.7));
        }

        100% {
            filter: drop-shadow(0 0 15px rgba(221, 160, 221, 0.9));
        }
    }

    @@keyframes float {
        0% {
            transform: translateY(0px);
        }

        50% {
            transform: translateY(-20px);
        }

        100% {
            transform: translateY(0px);
        }
    }

    .warning-text {
        background-color: rgba(61, 0, 61, 0.6);
        border-radius: 4px;
        padding: 1rem;
        border: 1px solid #cc99cc;
        box-shadow: 0 0 10px rgba(221, 160, 221, 0.5);
    }
</style>

@if (_pageLoading)
{
    <LoadingPageComponent />
}
else
{
    @if (UserModel.Level < 3)
    {
        <AnticheatSite />
    }
    else
    {
        @if (_accountVerified == 0)
        {
            <VerificationNotificationComponent />
            <UserNotVerifiedHellInteraction />
        }
        else
        {
            <MudItem Class="d-flex flex-column min-vh-100 align-items-center align-content-center justify-content-center my-1">
                <MudContainer Class="scroll-container">
                    <MudContainer Class="scroll">
                        <MudContainer Class="scroll-text d-flex flex-column justify-content-center align-items-center">
                            <MudImage Src="Demons/Gluttony.png" Width="300" Height="300"></MudImage>
                            <MudText Typo="Typo.h3">BEELZEBUB</MudText>
                            <MudText Align="Align.Center" Typo="Typo.h5" Class="my-4">
                                <i>
                                    <span>
                                        "The Great Devouruer"
                                    </span>
                                </i>
                            </MudText>
                            <MudText Class="mt-2 mb-5" Typo="Typo.body1" Align="Align.Center">
                                <i>
                                    <span>
                                        Beelzebub, the lord of Gluttony, rules with an appetite that is as insatiable as it is destructive.
                                        He embodies the overwhelming urge to consume, to gorge on whatever can be devoured, without ever being satisfied.
                                        His presence in the Third Circle is one of constant consumption and devouring, both literal and symbolic.
                                        Beelzebub is a grotesque and monstrous purple figure, bloated with power and hunger.
                                        His appearance is that of a bloated, towering demon with swollen features and gluttonous eyes that gleam with an unquenchable thirst for indulgence.
                                        He moves sluggishly, as if weighed down by his own excess, but there is a terrifying intensity to his presence.
                                        His endless cravings are not only for food but for power, control, and consumption of all things in his path.
                                        In Beelzebub’s domain, everything is a contest of consumption. And his game is a simple, yet fiercely competitive one, representing the endless hunger that drives the souls of Gluttony.
                                    </span>
                                </i>
                            </MudText>
                        </MudContainer>
                    </MudContainer>
                </MudContainer>

                <MudItem Class="d-flex justify-content-center align-items-center mt-auto w-100">
                    <PageFooter />
                </MudItem>
            </MudItem>
        }
    }
}

@code {
    private int _id { get; set; }
    private int _accountVerified { get; set; }
    public bool _pageLoading = true;
    private bool _userWonFinalgame => UserModel.BalanceAfterWin > 0;

    private UserDTO UserModel { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _id = Convert.ToInt32(user.FindFirst(u => u.Type == nameof(UserDTO.ID)).Value);
            _accountVerified = Convert.ToInt32(user.FindFirst(u => u.Type == "UserVerified")?.Value ?? "0");
            try
            {
                UserModel = await UserService.GetUserByID(_id);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        else
        {
            _id = 0;
        }
        _pageLoading = false;
        StateHasChanged();
    }
}
