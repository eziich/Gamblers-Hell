@page "/belphegor"
@using GamblersHell.Client.StateProviders
@using GamblersHell.Shared
@using GamblersHell.Client.Services
@using GamblersHell.Client.Pages.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@inject UserService UserService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<PageTitle>Belphegor @GamblersHellConstants.DeafultPageName</PageTitle>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="css/ScrollsHighRank.css">
</head>

<style>
    body {
        background-image: linear-gradient(180deg, #000000, #000000, #000000, #0a0a0a, #131313, #151515);
        background-attachment: fixed;
    }

    .satan-container {
        animation: glow 3s infinite alternate;
    }

    .title-text {
        font-family: 'Cinzel', serif;
        text-shadow: 0 0 10px rgba(255, 255, 255, 0.8);
        letter-spacing: 2px;
    }

    .scroll {
        background-image: radial-gradient(circle, #151515, #131313, #0a0a0a, #000000);
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 0 15px rgba(255, 255, 255, 0.5);
        padding: 2rem;
        border: 2px solid #cccccc;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .scroll:hover {
            box-shadow: 0 0 20px rgba(255, 255, 255, 0.8);
        }

    .scroll-text {
        color: #cccccc;
    }

    .satan-image {
        filter: contrast(1.2) saturate(0.4);
        transition: all 0.3s ease;
        border-radius: 4px;
        animation: float 6s ease-in-out infinite;
    }

    @@keyframes glow {
        0% {
            filter: drop-shadow(0 0 2px rgba(255, 255, 255, 0.7));
        }

        100% {
            filter: drop-shadow(0 0 15px rgba(255, 255, 255, 0.9));
        }
    }

    @@keyframes float {
        0% {
            transform: translateY(0px);
        }

        50% {
            transform: translateY(-20px);
        }

        100% {
            transform: translateY(0px);
        }
    }

    .warning-text {
        background-color: rgba(21, 21, 21, 0.6);
        border-radius: 4px;
        padding: 1rem;
        border: 1px solid #cccccc;
        box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
    }
</style>

@if (_pageLoading)
{
    <LoadingPageComponent />
}
else
{
    @if (UserModel.Level < 6)
    {
        <AnticheatSite />
    }
    else
    {
        @if (_accountVerified == 0)
        {
            <VerificationNotificationComponent />
            <UserNotVerifiedHellInteraction />
        }
        else
        {
            <MudItem Class="d-flex flex-column min-vh-100 align-items-center align-content-center justify-content-center my-1">
                <MudContainer Class="scroll-container">
                    <MudContainer Class="scroll">
                        <MudContainer Class="scroll-text d-flex flex-column justify-content-center align-items-center">
                            <MudImage Src="Demons/Hersey.png" Width="300" Height="300"></MudImage>
                            <MudText Typo="Typo.h3">BELPHEGOR</MudText>
                            <MudText Align="Align.Center" Typo="Typo.h5" Class="my-4">
                                <i>
                                    <span>
                                        "Bone Collector"
                                    </span>
                                </i>
                            </MudText>
                            <MudText Class="mt-2 mb-5" Typo="Typo.body1" Align="Align.Center">
                                <i>
                                    <span>
                                        Belphegor, the ruler of this circle, is a rat-like demon that slinks through the graveyard, a figure of cunning and manipulation.
                                        His body is a twisted amalgamation of black and white fur, streaked with patches that glow with an eerie, otherworldly light.
                                        His glowing orange eyes pierce the darkness, watching every movement with a malevolent gleam.
                                        The sight of his big but agile form darting from tombstone to tombstone evokes a sense of unease, as he whispers half-truths and deceptive promises into the ears of the damned souls trapped in their burning graves.
                                        Belphegor’s horns twist upward from his rat-like head, sharp and jagged, adding to his menacing appearance.
                                        His form is ever-shifting, moving between the shadows, always lurking just out of sight, yet never fully invisible.
                                        In this graveyard, Belphegor takes pleasure in watching the souls of the heretics burn forever, but even more so, he revels in their eternal doubt—their constant questioning of what is real and what is not.
                                        He knows that in the realm of uncertainty, there is no peace.
                                    </span>
                                </i>
                            </MudText>
                        </MudContainer>
                    </MudContainer>
                </MudContainer>

                <MudItem Class="d-flex justify-content-center align-items-center mt-auto w-100">
                    <PageFooter />
                </MudItem>
            </MudItem>
        }
    }
}

@code {
    private int _id { get; set; }
    private int _accountVerified { get; set; }
    private bool _userWonFinalgame => UserModel.BalanceAfterWin > 0;
    public bool _pageLoading = true;

    private UserDTO UserModel { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _id = Convert.ToInt32(user.FindFirst(u => u.Type == nameof(UserDTO.ID)).Value);
            _accountVerified = Convert.ToInt32(user.FindFirst(u => u.Type == "UserVerified")?.Value ?? "0");
            try
            {
                UserModel = await UserService.GetUserByID(_id);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        else
        {
            _id = 0;
        }
        _pageLoading = false;
        StateHasChanged();
    }
}
