@page "/raum"
@using GamblersHell.Client.StateProviders
@using GamblersHell.Shared
@using GamblersHell.Client.Services
@using GamblersHell.Client.Pages.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager
@inject UserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<PageTitle>Raum @GamblersHellConstants.DeafultPageName</PageTitle>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="css/ScrollsHighRank.css">
</head>

<style>
    body {
        background-image: linear-gradient(180deg, #000000, #000000, #000000, #0a0a0a, #131313, #151515);
        background-attachment: fixed;
    }

    .satan-container {
        animation: glow 3s infinite alternate;
    }

    .title-text {
        font-family: 'Cinzel', serif;
        text-shadow: 0 0 10px rgba(255, 255, 255, 0.8);
        letter-spacing: 2px;
    }

    .scroll {
        background-image: radial-gradient(circle, #151515, #131313, #0a0a0a, #000000);
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 0 15px rgba(255, 255, 255, 0.5);
        padding: 2rem;
        border: 2px solid #cccccc;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .scroll:hover {
            box-shadow: 0 0 20px rgba(255, 255, 255, 0.8);
        }

    .scroll-text {
        color: #cccccc;
    }

    .satan-image {
        filter: contrast(1.2) saturate(0.4);
        transition: all 0.3s ease;
        border-radius: 4px;
        animation: float 6s ease-in-out infinite;
    }

    @@keyframes glow {
        0% {
            filter: drop-shadow(0 0 2px rgba(255, 255, 255, 0.7));
        }

        100% {
            filter: drop-shadow(0 0 15px rgba(255, 255, 255, 0.9));
        }
    }

    @@keyframes float {
        0% {
            transform: translateY(0px);
        }

        50% {
            transform: translateY(-20px);
        }

        100% {
            transform: translateY(0px);
        }
    }

    .warning-text {
        background-color: rgba(21, 21, 21, 0.6);
        border-radius: 4px;
        padding: 1rem;
        border: 1px solid #cccccc;
        box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
    }
</style>

@if (_pageLoading)
{
    <LoadingPageComponent />
}
else
{
    @if (_accountVerified == 0)
    {
        <VerificationNotificationComponent />
        <UserNotVerifiedHellInteraction />
    }
    else
    {
        <MudItem Class="d-flex flex-column min-vh-100 align-items-center align-content-center justify-content-center my-1">
            <MudContainer Class="scroll-container">
                <MudContainer Class="scroll">
                    <MudContainer Class="scroll-text d-flex flex-column justify-content-center align-items-center">
                        <MudImage Src="Demons/Limbo.png" Width="300" Height="300"></MudImage>
                        <MudText Typo="Typo.h3">RAUM</MudText>
                        <MudText Align="Align.Center" Typo="Typo.h5" Class="my-4">
                            <i>
                                <span>
                                    "The Riddler"
                                </span>
                            </i>
                        </MudText>
                        <MudText Class="mt-2 mb-5" Typo="Typo.body1" Align="Align.Center">
                            <i>
                                <span>
                                    Raum is the demon who rules Limbo, and unlike the other, more vicious demons of Hell, his power is not built on causing suffering through violence or torment.
                                    Instead, Raum’s dominion is one of endless frustration and delayed resolution.
                                    He thrives on the souls’ inability to move forward, caught in an endless loop of choices without consequence, much like the souls who dwell in Limbo—never condemned but never saved.
                                    Raum is a trickster, a manipulator of minds, and his game reflects this.
                                    As the lowest-ranked demon in Hell, his games are deceptively simple, drawing the player into a web of combinations and choices.
                                    Raum presents the player with a challenge based on hidden patterns, a game of logic and deduction that feels far more frustrating than it first appears.
                                    There is no room for divine intervention in his domain, only the mind’s own capacity for pattern recognition and insight.
                                    In appearance, Raum is a shadowy, dark, often seen flickering between forms—sometimes as a tall, cloaked figure, other times as a shimmering, indistinct presence in the air.
                                    His face remains obscured, and he speaks in riddles, adding to the aura of mystery and disorientation that permeates Limbo. His very nature is defined by ambiguity—never clear, never fully formed.
                                    He is a demon of uncertainty, and his game reflects that same quality.
                                </span>
                            </i>
                        </MudText>
                    </MudContainer>
                </MudContainer>
            </MudContainer>

            <MudItem Class="d-flex justify-content-center align-items-center mt-auto w-100">
                <PageFooter />
            </MudItem>
        </MudItem>
    }
}

@code {
    private int _id { get; set; }
    private int _accountVerified { get; set; }
    private bool _pageLoading = true;

    private UserDTO UserModel { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _id = Convert.ToInt32(user.FindFirst(u => u.Type == nameof(UserDTO.ID)).Value);
            _accountVerified = Convert.ToInt32(user.FindFirst(u => u.Type == "UserVerified")?.Value ?? "0");
            try
            {
                UserModel = await UserService.GetUserByID(_id);
            }
            catch
            {
                throw;
            }
        }
        else
        {
            _id = 0;
        }
        _pageLoading = false;
    }
}
