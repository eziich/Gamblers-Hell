@page "/forgottenpassword"
@using GamblersHell.Shared
@using GamblersHell.Client.Services
@using Microsoft.AspNetCore.Components.Authorization
@using GamblersHell.Client.StateProviders
@using Microsoft.AspNetCore.Authorization
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject CookieAuthenticationStateProvider AuthManager
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserService UserService
@inject NavigationManager NavManager
@inject NavMenuState NavMenuState
@attribute [AllowAnonymous]

<PageTitle>Forgotten Password @GamblersHellConstants.DeafultPageName</PageTitle>

<style>
    body {
        background-image: linear-gradient(135deg, #000000, #0a0000, #1a0000, #2d0000, #3d0000, #2d0000, #1a0000, #0a0000, #000000);
    }

    .login-card {
        backdrop-filter: blur(10px);
        border-radius: 16px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
        border: 1px solid rgba(255, 0, 0, 0.2);
        overflow: hidden;
    }

    .form-container {
        background-color: rgba(25, 25, 25, 0.95);
        border-radius: 0 0 16px 16px;
        padding: 24px 32px;
    }

    .logo-container {
        background-color: rgba(20, 20, 20, 0.95);
        padding: 24px 0;
    }

    .form-field {
        margin-bottom: 20px;
    }

    /* Override MudBlazor field styles for dark theme */
    ::deep .mud-input {
        color: #ff3333 !important;
    }

    ::deep .mud-input-label {
        color: #ff3333 !important;
        background-color: transparent !important;
    }

    ::deep .mud-input-label-outlined {
        background-color: rgba(25, 25, 25, 0.95) !important;
        padding: 0 5px;
    }

    ::deep .mud-input-outlined {
        border-color: rgba(255, 0, 0, 0.5) !important;
    }

        ::deep .mud-input-outlined:hover {
            border-color: #ff3333 !important;
        }

        ::deep .mud-input-outlined:focus-within {
            border-color: #ff0000 !important;
        }

            ::deep .mud-input-outlined:focus-within .mud-input-label {
                color: #ff0000 !important;
            }

    ::deep .mud-divider {
        background-color: rgba(255, 0, 0, 0.3) !important;
    }

    /* Placeholder text color */
    ::deep .mud-input::placeholder {
        color: rgba(255, 255, 255, 0.7) !important;
        opacity: 1;
    }

    ::deep .mud-input:-ms-input-placeholder {
        color: rgba(255, 255, 255, 0.7) !important;
    }

    ::deep .mud-input::-ms-input-placeholder {
        color: rgba(255, 255, 255, 0.7) !important;
    }
</style>

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex justify-center align-center" Style="height: 100vh; padding: 16px;">
    <MudPaper Class="login-card" Style="width: 100%;">
        <MudContainer Class="logo-container d-flex flex-column justify-content-center align-items-center">
            <MudImage ObjectFit="ObjectFit.Contain" Src="MainLogo.png" Width="150" Height="150" Class="mb-3" />
            <MudText Typo="Typo.h4" Style="color:#ff0000; font-weight: 600;" Class="mb-2">Forgotten Password</MudText>
            <MudText Typo="Typo.subtitle1" Style="color:#ff3333; opacity: 0.8;">Mortal who can't gamble is mortal of no use</MudText>
        </MudContainer>

        <MudContainer Class="form-container">
            <MudForm @ref="_form" @bind-IsValid="@_isFormValid">
                <MudText Typo="Typo.caption" Style="color:white">1.) Enter your gmail address. A password reset token will be sent to this address.</MudText>

                <MudTextField Class="form-field"
                            T="string"
                            Placeholder="user.example@gmail.com"
                            Style="color:white"
                            Variant="Variant.Outlined"
                            Required="true"
                            RequiredError="Username is required"
                            @bind-Value="_email"
                            OnlyValidateIfDirty="true"
                            Adornment="Adornment.Start"
                            AdornmentIcon="@Icons.Material.Filled.Email"
                            AdornmentColor="Color.Error" />

                <MudButton FullWidth="true"
                           Disabled="@_processing"
                           Size="Size.Large"
                           OnClick="() => SendTokenViaEmail()"
                           Variant="Variant.Filled"
                           Class="mb-2"
                           Color="Color.Error"
                           Style="border-radius: 8px; padding: 12px 0; font-weight: 500;">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Authenticating...</MudText>
                    }
                    else
                    {
                        <MudContainer Class="d-flex flex-row align-content-center align-items-center justify-content-center">
                            <MudText>Send token to the adress</MudText>
                            <MudIcon Class="mx-1" Icon="@Icons.Material.Filled.Token"></MudIcon>
                        </MudContainer>
                    }
                </MudButton>

                <MudDivider Class="my-2" />

                <MudText Typo="Typo.caption" Style="color:white">2.) Once you receive the token by email, enter it into the token text field.</MudText>
                <MudTextField Class="form-field"
                              T="string"
                              Style="color:white"
                              Placeholder="Token"
                              Variant="Variant.Outlined"
                              InputType="showPasswordAction()"
                              Required="true"
                              @bind-Value="_token"
                              RequiredError="Token is required!"
                              Immediate="true"
                              OnlyValidateIfDirty="true"
                              @onkeypress="@OnKeyPressedSendToken"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Token"
                              AdornmentColor="Color.Error">
                </MudTextField>

                <MudText Typo="Typo.caption" Class="mb-2" Style="color:white">3.) Set your new password and confirm it.</MudText>
                <MudTextField Class="form-field"
                              T="string"
                              Style="color:white"
                              Placeholder="Password"
                              Variant="Variant.Outlined"
                              InputType="showPasswordAction()"
                              Required="true"
                              @bind-Value="_newPassword"
                              RequiredError="Password is required!"
                              Immediate="true"
                              OnlyValidateIfDirty="true"
                              @onkeypress="@OnKeyPressedChangePassword"
                              Adornment="Adornment.Start"
                              OnAdornmentClick="() => showPasswordButton()"
                              AdornmentIcon="@(_showPassword ? @Icons.Material.Filled.VisibilityOff : @Icons.Material.Filled.Visibility)"
                              AdornmentColor="Color.Error">
                </MudTextField>

                <MudTextField Class="form-field"
                              T="string"
                              Style="color:white"
                              Placeholder="Confirm password"
                              Variant="Variant.Outlined"
                              InputType="showConfirmPasswordAction()"
                              Required="true"
                              @bind-Value="_confirmPassword"
                              RequiredError="Confirm Password is required!"
                              Immediate="true"
                              OnlyValidateIfDirty="true"
                              @onkeypress="@OnKeyPressedChangePassword"
                              Adornment="Adornment.Start"
                              OnAdornmentClick="() => showConfirmPasswordButton()"
                              AdornmentIcon="@(_showPassword ? @Icons.Material.Filled.VisibilityOff : @Icons.Material.Filled.Visibility)"
                              AdornmentColor="Color.Error">
                </MudTextField>

                <MudDivider Class="my-4" />

                <MudButton FullWidth="true"
                           Disabled="@_processing"
                           Size="Size.Large"
                           OnClick="() => ChangePassword()"
                           Variant="Variant.Filled"
                           Color="Color.Error"
                           Style="border-radius: 8px; padding: 12px 0; font-weight: 500;">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Authenticating...</MudText>
                    }
                    else
                    {
                        <MudContainer Class="d-flex flex-row align-content-center align-items-center justify-content-center">
                            <MudText>Set new password</MudText>
                            <MudIcon Class="mx-1" Icon="@Icons.Material.Filled.Password"></MudIcon>
                        </MudContainer>
                    }
                </MudButton>

                <div Class="mt-3">
                    @foreach (var error in _errors)
                    {
                        <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Dense="true" Class="my-2">@error</MudAlert>
                    }
                </div>
            </MudForm>
        </MudContainer>
    </MudPaper>
</MudContainer>

@code {
    private bool _isFormValid;
    private bool _showPassword = false;
    private bool _showConfirmPassword = false;
    private bool _processing = false;

    private string _email { get; set; } = string.Empty;
    private string _token { get; set; } = string.Empty;
    private string _newPassword { get; set; } = string.Empty;
    private string _confirmPassword { get; set; } = string.Empty;


    MudForm _form;
    List<string> _errors = new List<string>();

    [Parameter, SupplyParameterFromQuery(Name = "returnUrl")]
    public string? _ReturnUrl { get; set; }

    [CascadingParameter] public Task<AuthenticationState> _AuthStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await _AuthStateTask).User;
        if (user.Identity.IsAuthenticated)NavManager.NavigateTo("/");
    }

    public async void SendTokenViaEmail()
    {
        if (string.IsNullOrEmpty(_email))
        {
            Snackbar.Add("Email is required", Severity.Error);
            return;
        }

        var result = await UserService.RequestTokenForgottenPassword(_email);

        if (result)
        {
            Snackbar.Add($"Token successfully sent to {_email}", Severity.Success);
        }
    }

    public async void ChangePassword()
    {
        if (string.IsNullOrEmpty(_newPassword) || string.IsNullOrEmpty(_token) || string.IsNullOrEmpty(_confirmPassword))
        {
            Snackbar.Add("All fields are required", Severity.Error);
            return;
        }

        if (_newPassword != _confirmPassword)
        {
            Snackbar.Add("Password and Confirm Password do not match", Severity.Error);
            return;
        }

        var result = await UserService.ChangeForgottenPassword(_token, _newPassword);

        if (result)
        {
            Snackbar.Add("Password changed successfully", Severity.Success);
            await Task.Delay(1000);
            NavigationManager.NavigateTo("/login");
        }
    }

    public void OnKeyPressedSendToken(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SendTokenViaEmail();
        }
    }

    public void OnKeyPressedChangePassword(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            ChangePassword();
        }
    }

    private void showPasswordButton()
    {
        _showPassword = !_showPassword;
    }

    private void showConfirmPasswordButton()
    {
        _showConfirmPassword = !_showConfirmPassword;
    }

    private InputType showPasswordAction()
    {
        if (!_showPassword)
        {
            return InputType.Password;
        }
        else
        {
            return InputType.Text;
        }
    }

    private InputType showConfirmPasswordAction()
    {
        if (!_showConfirmPassword)
        {
            return InputType.Password;
        }
        else
        {
            return InputType.Text;
        }
    }
}
