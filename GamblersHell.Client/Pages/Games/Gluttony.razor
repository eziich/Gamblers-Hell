@page "/gluttony"
@using GamblersHell.Shared
@using System.Text.Json;
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using GamblersHell.Client.Services
@using GamblersHell.Client.Pages.Components
@inject ISnackbar Snackbar
@inject CardWarsService CardWarsService
@inject TransactionService TransactionService
@inject UserService UserService
@inject NavMenuState NavMenuState
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<PageTitle>Gluttony @GamblersHellConstants.DeafultPageName</PageTitle>

<head>
    <link rel="stylesheet" href="css/DemonFloat.css" />
    <link href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;700&display=swap" rel="stylesheet">
</head>

<style>
    body {
        background: radial-gradient(circle at center, #3d003d 0%, #2a002a 30%, #1a001a 60%, #000000 100%);
        background-attachment: fixed;
        background-size: cover;
    }

    .transparentPaper {
        background-color: transparent !important;
    }

    .title-text {
        font-family: 'Cinzel', serif;
        text-shadow: 0 0 10px rgba(128, 0, 128, 0.8);
        letter-spacing: 3px;
        text-transform: uppercase;
        color: #ff99ff !important;
    }

    .game-card {
        transition: transform 0.3s;
        filter: drop-shadow(0 0 5px rgba(128, 0, 128, 0.5));
        border-radius: 8px;
    }

        .game-card:hover {
            transform: translateY(-5px);
            filter: drop-shadow(0 0 10px rgba(128, 0, 128, 0.8));
        }

    .demon {
        animation: float 6s ease-in-out infinite;
        filter: drop-shadow(0 0 15px rgba(128, 0, 128, 0.6));
    }

    .game-button {
        background-color: #3d003d !important;
        color: #ff99ff !important;
        font-weight: bold;
        transition: transform 0.2s, background-color 0.2s;
        border: 2px solid #ff55ff !important;
        border-radius: 4px;
        text-transform: uppercase;
        letter-spacing: 1.5px;
        font-family: 'Cinzel', serif;
    }

        .game-button:hover:not(.mud-disabled-text) {
            background-color: #5d005d !important;
            transform: scale(1.05);
            box-shadow: 0 0 10px rgba(128, 0, 128, 0.8);
        }

    .game-divider {
        background: linear-gradient(90deg, transparent, #ff00ff, transparent) !important;
        height: 3px !important;
        margin: 10px 0;
        box-shadow: 0 0 10px rgba(128, 0, 128, 0.8);
    }

    .score-chip {
        background-color: #3d003d !important;
        border: 1px solid #ff55ff !important;
        color: #ff99ff !important;
        box-shadow: 0 0 8px rgba(128, 0, 128, 0.6);
        font-family: 'Cinzel', serif;
    }

    .score-avatar {
        background-color: #3d003d !important;
        border: 1px solid #ff55ff !important;
        color: #ff99ff !important;
        box-shadow: 0 0 8px rgba(128, 0, 128, 0.6);
        font-weight: bold;
    }

    .cards-container {
        background: rgba(20, 0, 20, 0.3);
        border-radius: 8px;
        padding: 10px;
        box-shadow: inset 0 0 15px rgba(128, 0, 128, 0.3);
    }

    .pulse-glow {
        animation: pulseglow 2s infinite alternate;
    }

    .playerCards {
        transition: transform 0.3s;
        filter: drop-shadow(0 0 5px rgba(128, 0, 128, 0.5));
        border-radius: 8px;
    }

        .playerCards:hover {
            transform: translateY(-5px) scale(1.1);
            filter: drop-shadow(0 0 10px rgba(128, 0, 128, 0.8));
        }

    .card-text {
        font-family: 'Cinzel', serif;
        color: #ff99ff !important;
        text-shadow: 0 0 5px rgba(128, 0, 128, 0.5);
    }
</style>

@if (_pageLoading)
{
    <LoadingPageComponent />
}
else
{
    @if (UserModel.Level < 3)
    {
        <AnticheatSite />
    }
    else
    {
        @if (_accountVerified == 0)
        {
            <VerificationNotificationComponent />
            <UserNotVerifiedHellInteraction />
        }
        else
        {
            @*Mobile Verison*@
            <MudHidden Breakpoint="Breakpoint.MdAndUp">
                <MudContainer Class="d-flex flex-column justify-content-center align-items-center">

                    <MudPaper Elevation="0" Class="d-flex flex-column justify-content-center align-items-center mb-4 transparentPaper">
                        <MudText Class="title-text pulse-glow" Typo="Typo.h4">Card Wars</MudText>
                    </MudPaper>

                    <MudPaper Elevation="0" Class="d-flex flex-column justify-content-center align-items-center my-4 transparentPaper">
                        <MudTooltip Text="@_demonMessage" Style="background-color:#3d003d !important" Placement="Placement.Right" Arrow="true">
                            <MudImage Class="demon" Src="Demons/Gluttony.png" Width="200" Height="200"></MudImage>
                        </MudTooltip>

                        @if (DealerCards.Count != 0 || _dealerRoundsWon != 0 || _playerRoundsWon != 0)
                        {
                            <MudContainer Class="d-flex flex-column justify-content-center align-items-center">
                                <MudChip Color="Color.Error" Class="score-chip" T="string">Beelzebub rounds won: @_dealerRoundsWon</MudChip>
                                <MudChip Color="Color.Error" Class="score-chip" T="string">Beelzebub score: @_dealerScore</MudChip>
                            </MudContainer>
                        }
                    </MudPaper>

                    @if (_playGame)
                    {
                        @if (DealerCards.Count > 0)
                        {
                            <MudContainer Class="d-flex flex-wrap flex-row justify-content-center align-items-center my-4 transparentPaper">
                                @foreach (var dealerCard in DealerCards)
                                {
                                    <MudImage Class="mx-1" Src="https://tekeye.uk/playing_cards/images/svg_playing_cards/backs/red.svg" Width="60" Height="90" />
                                }
                            </MudContainer>
                        }

                        @if (ChosenCardDealer.ID != 0)
                        {
                            <MudImage Width="60" Height="90" Src="@ChosenCardDealer.Picture" Class="mb-1 game-card"></MudImage>
                        }

                        @if (ChosenCardPlayer.ID != 0)
                        {
                            <MudImage Width="60" Height="90" Src="@ChosenCardPlayer.Picture" Class="mt-1 game-card"></MudImage>
                        }

                        @if (PlayerCards.Count > 0)
                        {
                            <MudContainer Class="d-flex flex-wrap flex-row justify-content-center align-content-center my-2">
                                @foreach (var playerCard in PlayerCards)
                                {
                                    <MudImage @onclick="() => CardWar(playerCard.ID)" Class="playerCards mx-1 my-1" Width="60" Height="90" Src="@playerCard.Picture"></MudImage>
                                }
                            </MudContainer>
                        }

                        @if (PlayerCards.Count != 0 || _dealerRoundsWon != 0 || _playerRoundsWon != 0)
                        {
                            <MudContainer Class="d-flex flex-row justify-content-center align-items-center">
                                <MudChip Color="Color.Error" Class="score-chip" T="string">Rounds Won: @_playerRoundsWon</MudChip>
                                <MudChip Color="Color.Error" Class="score-chip" T="string">Your score: @_playerScore</MudChip>
                            </MudContainer>
                        }

                        <MudButton Class="game-button mt-2" Variant="Variant.Outlined" Disabled="_playerScore !=0 || _dealerScore !=0" @onclick="DrawCards">Draw Cards</MudButton>
                    }
                    else
                    {
                        <MudButton Class="game-button" Disabled="UserModel.Balance < _gameBet" Variant="Variant.Filled" @onclick="() => PlayGame()">Play</MudButton>
                    }
                </MudContainer>
            </MudHidden>

            @*PC Verison*@
            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                <MudContainer Class="d-flex flex-column justify-content-center align-items-center">

                    <MudPaper Elevation="0" Class="d-flex flex-column justify-content-center align-items-center mb-4 transparentPaper">
                        <MudText Class="title-text pulse-glow" Typo="Typo.h3">Card Wars</MudText>
                    </MudPaper>

                    <MudPaper Elevation="0" Class="d-flex flex-column justify-content-center align-items-center my-4 transparentPaper">
                        <MudTooltip Text="@_demonMessage" Style="background-color:#3d003d !important" Placement="Placement.Right" Arrow="true">
                            <MudImage Class="demon" Src="Demons/Gluttony.png" Width="250" Height="250"></MudImage>
                        </MudTooltip>

                        @if (DealerCards.Count != 0 || _dealerRoundsWon != 0 || _playerRoundsWon != 0)
                        {
                            <MudContainer Class="d-flex flex-row justify-content-center align-items-center">
                                <MudChip Color="Color.Error" Class="score-chip" T="string">Beelzebub rounds won: @_dealerRoundsWon</MudChip>
                                <MudChip Color="Color.Error" Class="score-chip" T="string">Beelzebub score: @_dealerScore</MudChip>
                            </MudContainer>
                        }
                    </MudPaper>

                    @if (_playGame)
                    {
                        @if (DealerCards.Count > 0)
                        {
                            <MudContainer Class="d-flex flex-row justify-content-center align-items-center my-4 transparentPaper">
                                @foreach (var dealerCard in DealerCards)
                                {
                                    <MudImage Class="mx-1" Src="https://tekeye.uk/playing_cards/images/svg_playing_cards/backs/red.svg" Width="100" Height="140" />
                                }
                            </MudContainer>
                        }

                        @if (ChosenCardDealer.ID != 0)
                        {
                            <MudImage Width="100" Height="140" Src="@ChosenCardDealer.Picture" Class="mb-1 game-card"></MudImage>
                        }

                        @if (ChosenCardPlayer.ID != 0)
                        {
                            <MudImage Width="100" Height="140" Src="@ChosenCardPlayer.Picture" Class="mt-1 game-card"></MudImage>
                        }

                        @if (PlayerCards.Count > 0)
                        {
                            <MudContainer Class="d-flex flex-row justify-content-center align-content-center my-2">
                                @foreach (var playerCard in PlayerCards)
                                {
                                    <MudImage @onclick="() => CardWar(playerCard.ID)" Class="playerCards mx-1" Width="100" Height="140" Src="@playerCard.Picture"></MudImage>
                                }
                            </MudContainer>
                        }

                        @if (PlayerCards.Count != 0 || _dealerRoundsWon != 0 || _playerRoundsWon != 0)
                        {
                            <MudContainer Class="d-flex flex-row justify-content-center align-items-center">
                                <MudChip Color="Color.Error" Class="score-chip" T="string">Rounds Won: @_playerRoundsWon</MudChip>
                                <MudChip Color="Color.Error" Class="score-chip" T="string">Your score: @_playerScore</MudChip>
                            </MudContainer>
                        }

                        <MudButton Class="game-button mt-2" Variant="Variant.Outlined" Disabled="_playerScore !=0 || _dealerScore !=0" @onclick="DrawCards">Draw Cards</MudButton>
                    }
                    else
                    {
                        <MudButton Class="game-button" Disabled="UserModel.Balance < _gameBet" Variant="Variant.Filled" @onclick="() => PlayGame()">Play</MudButton>
                    }
                </MudContainer>
            </MudHidden>
        }
    }
}

@code {
    private int _id { get; set; }
    private int _accountVerified { get; set; }
    private int _gameBet = 500;
    private int _gameProgressionLevel = 3;
    private bool _pageLoading = true;
    private bool _playGame = false;
    private bool _userWonFinalgame => UserModel.BalanceAfterWin > 0;
    private int _playerScore = 0;
    private int _dealerScore = 0;
    private int _playerRoundsWon = 0;
    private int _dealerRoundsWon = 0;
    private string _demonMessage = "I crave more than food, mortal. I feast on failure... and you reek of it.";
    private string _gameSessionToken;

    CardWarsCardsDTO ChosenCardPlayer = new();
    CardWarsCardsDTO ChosenCardDealer = new();

    private UserDTO UserModel { get; set; } = new();

    private List<CardWarsCardsDTO> PlayerCards = new();
    private List<CardWarsCardsDTO> DealerCards = new();

    protected override async Task OnInitializedAsync()
    {
        // Create a game session when the game starts
        _gameSessionToken = await TransactionService.CreateGameSession("Gluttony");
        if (string.IsNullOrEmpty(_gameSessionToken))
        {
            Snackbar.Add("Failed to initialize game session", Severity.Error);
            NavigationManager.NavigateTo("/");
            return;
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        _demonMessage = "I crave more than food, mortal. I feast on failure... and you reek of it.";

        if (user.Identity.IsAuthenticated)
        {
            _id = Convert.ToInt32(user.FindFirst(u => u.Type == nameof(UserDTO.ID)).Value);
            _accountVerified = Convert.ToInt32(user.FindFirst(u => u.Type == "UserVerified")?.Value ?? "0");
            try
            {
                UserModel = await UserService.GetUserByID(_id);
            }
            catch
            {
                throw;
            }
            finally
            {
                _pageLoading = false;
            }
        }
        else
        {
            _id = 0;
        }
    }

    public async void PlayGame()
    {
        _playGame = true;
        await TransactionService.GameLostBetTransaction(_id, _gameBet);
        NavMenuState.RefreshNavMenu();
        StateHasChanged();
    }

    public async Task DrawCards()
    {
        while (PlayerCards.Count < 15)
        {
            var result = await CardWarsService.GetRandomCardAsync();
            bool playerCardExists = PlayerCards.Any(c => c.ID == result.ID);

            if (!playerCardExists)
            {
                PlayerCards.Add(result);
            }
            else
            {
                await DrawCards();
            }
        }
        await DrawDealer();
        _demonMessage = "Any good cards, little snack?";
    }

    public async Task DrawDealer()
    {
        while (DealerCards.Count < 15)
        {
            var result = await CardWarsService.GetRandomCardAsync();
            bool dealerCardExists = DealerCards.Any(c => c.ID == result.ID)
                                  || PlayerCards.Any(c => c.ID == result.ID);

            if (!dealerCardExists)
            {
                DealerCards.Add(result);
            }
            else
            {
                await DrawDealer();
            }
        }
    }

    public async Task CardWar(int ID)
    {
        foreach (CardWarsCardsDTO card in PlayerCards)
        {
            if (card.ID == ID)
            {
                ChosenCardPlayer = card;
            }

        }

        PlayerCards.Remove(ChosenCardPlayer);

        var random = new Random();
        int randomIndex = random.Next(0, DealerCards.Count);

        ChosenCardDealer = DealerCards[randomIndex];
        DealerCards.RemoveAt(randomIndex);

        if (ChosenCardPlayer.Value > ChosenCardDealer.Value)
        {
            _playerScore += 1;
        }
        else if (ChosenCardPlayer.Value < ChosenCardDealer.Value)
        {
            _dealerScore += 1;
        }
        else
        {
            Snackbar.Add("Cards have same value, no points added");
        }

        if (PlayerCards.Count == 0 && DealerCards.Count == 0)
        {
            if (_playerScore > _dealerScore)
            {
                Snackbar.Add("You won the round! Shuffling..", Severity.Success);
                _demonMessage = "No worries, my appetite for you rises...";
                _playerRoundsWon += 1;
            }
            else
            {
                Snackbar.Add("Beelzebub won the round! Shuffling..", Severity.Error);
                _demonMessage = "I will eat you!";
                _dealerRoundsWon += 1;
            }
            await Task.Delay(1000);
            GameReset();

            if (_dealerRoundsWon > 5 && _dealerRoundsWon > _playerRoundsWon)
            {
                Snackbar.Add("Beelzebub won the game! Game over", Severity.Error);
                _demonMessage = "Time to eat..";
                GameReset();
                await OnInitializedAsync();
                _playGame = false;
                NavMenuState.RefreshNavMenu();
                StateHasChanged();
            }

            if (_playerRoundsWon > 5 && _dealerRoundsWon < _playerRoundsWon)
            {
                Snackbar.Add("You won the game!", Severity.Success);
                _demonMessage = "I lose... but hunger never dies. It only waits.";
                //User won the game for the first time, achivement
                if (UserModel.Level == 3)
                {
                    Snackbar.Add("Victory tastes sweet, but beware—the appetite for more never fades. For now, you've satisfied your cravings, but gluttony never stops—it only gets hungrier.", Severity.Error, config =>
                    {
                        config.Icon = @Icons.Custom.Uncategorized.ChessKing;
                        config.IconColor = Color.Inherit;
                        config.IconSize = Size.Large;
                    });
                    await TransactionService.GameWonTransaction(_id, _gameBet, _gameProgressionLevel, "Gluttony", _gameSessionToken);
                    NavMenuState.RefreshNavMenu();
                    StateHasChanged();
                    await Task.Delay(1000);
                    NavigationManager.NavigateTo("/mamoon");
                    return;
                }

                await TransactionService.GameWonTransaction(_id, _gameBet, _gameProgressionLevel, "Gluttony", _gameSessionToken);
                GameReset();
                await OnInitializedAsync();
                _playGame = false;
                NavMenuState.RefreshNavMenu();
                StateHasChanged();
            }
        }
    }

    public void GameReset()
    {
        ChosenCardPlayer = new();
        ChosenCardDealer = new();
        PlayerCards.Clear();
        DealerCards.Clear();
        _playerScore = 0;
        _dealerScore = 0;
        _demonMessage = "Any good cards, little snack?";
    }
}
